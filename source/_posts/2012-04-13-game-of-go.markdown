---
layout: post
title: "The Game of Go: a Programmer's Perspective"
date: 2012-04-13 08:30
author: Louis Chatriot
comments: true
categories: game, go, programming, algorithm, monte carlo tree-search
---


The game of go is very interesting from an AI programmer's point of
view, because of how difficult it is to make a computer compete against
a stromg human and the ideas researchers used to get closer to that goal.  


// PICTURE


## Game of Go: a (very) brief overview
Go is very similar to Chess: it is a strategic game where two players take
turn placing stones on a board. The two key differences between these
two are:  

* In Go, the board starts empty, and you add stones at each turn vs
  chess where you start with an army and try to destroy the other one
* The [rules](http://senseis.xmp.net/?RulesOfGoIntroductory) are much simpler in Go then in Chess: in particular there is only one type of stone vs the different Chess pieces

I really encourage you to check it out, you can [learn to play here](http://senseis.xmp.net/?RulesOfGoIntroductory) and [play here](http://www.gokgs.com/).


## Compexity, comparison to chess
Even though the rules are so simple, it has proven to be very hard to
build a good Go-playing program. In fact, while top Chess-playing
softwares can compete with the best humans (remember how Deep Blue beat
Gary Kasparov in 1997), even children can beat the best Go-playing
programs. There are three main reasons for this:  

* **Game-tree complexity**: there are about [10<sup>123</sup> possible games
  in Chess](http://en.wikipedia.org/wiki/Shannon_number). For Go,
[estimates vary](http://en.wikipedia.org/wiki/Go_and_mathematics) but
the [American Go Association reckons there are 10<sup>700</sup> possible
games](http://www.usgo.org/resources/topten.html). This is because there
are more turns in a Go game than in a Chess game (200 vs 50 on average),
and there are more possibilities at each turn in Go (up to 350 vs 50).
* **[Lack of a good heuristic](http://en.wikipedia.org/wiki/Evaluation_function)**: Chess programs are able to evaluate quite accurately and quickly whether a given position is better than another one. On the contrary, no good heuristic has been found for Go yet.
* **Pattern-recognition**: strong Go players rely heavily on recognizing
  the shapes the stones take. There are too many of them for a computer
to use.


PATTERNS



## Tree-search with heuristics (mogo)








*I am a Go player myself, even though not very good. During an
internship in a Computer Science laboratory, I worked on [MoGo](http://www.lri.fr/~teytaud/mogo.html) for 2 months in 2008.*
