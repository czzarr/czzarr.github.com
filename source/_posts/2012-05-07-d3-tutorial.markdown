---
layout: post
title: "Introduction to d3: Build an Animated Graph in 12 Lines of Code"
date: 2012-05-07 12:17
comments: true
categories: [d3, animated graphs, tutorial]
---


Before anything else, let's take a look at we're gonna build in only 12
lines of javascript. Click on any bar of this chart -you can do it multiple times- to see what happens!  


<div id='d3TutoGraphContainer'></div>
<script type="text/javascript" src="http://d3js.org/d3.v2.min.js"></script>
<script type="text/javascript">
// Suppose there is currently one div with id "graphContainer" in the DOM
// We append a 900x600 empty SVG container in the div
var chart = d3.select("#d3TutoGraphContainer").append("svg").attr("width", "600").attr("height", "290");

// There is no rectangle on which we can bind data in the SVG container
// All the data will thus be bound in the enter
var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24, 8, 12, 1, 1, 20])
.enter().append('rect')                           // Add a rectangle for each data in the enter
.attr("stroke", "none").attr("fill", "steelblue") // All rectangles are blue with no borders
.attr("x", 0)
.attr("y", function(d, i) {return 25 * i; } )
.attr("width", function(d) {return 20 * d; } )
.attr("height", "20");

rects.on('click', function() {
     // Wait 1s, then increase rectangles size with a 2s transition
     rects.transition().duration(2000).delay(200)
     .attr("width", function(d) {return 500 * Math.random(); } ) });
</script>


Pretty neat, huh? You can see the gist of a standalone working example
[here](https://gist.github.com/2601571). We're going to go through the
javascript part which consists of 12 lines of javascript (comments and
blank lines excluded of course). Here it is:


    // Suppose there is currently one div with id "d3TutoGraphContainer" in the DOM
    // We append a 600x300 empty SVG container in the div
    var chart = d3.select("#d3TutoGraphContainer").append("svg").attr("width", "600").attr("height", "300");

    // There is no rectangle on which we can bind data in the SVG container
    // All the data will thus be bound in the enter
    var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24, 8, 12, 1, 1, 20])
                     .enter().append('rect')                           // Add a rectangle for each data in the enter
                     .attr("stroke", "none").attr("fill", "steelblue") // All rectangles are blue with no borders
                     .attr("x", 0)
                     .attr("y", function(d, i) { return 25 * i; } )
                     .attr("width", function(d) { return 20 * d; } )
                     .attr("height", "20");

    rects.on('click', function() {
                        rects.transition().duration(2000).delay(200)
                             .attr("width", function(d) { return 500 * Math.random(); } )
                      });



