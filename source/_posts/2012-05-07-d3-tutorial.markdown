---
layout: post
title: "Introduction to d3: Build an Animated Graph in 12 Lines of Code"
date: 2012-05-07 12:17
comments: true
categories: [d3, animated graphs, tutorial]
---


Before anything else, let's take a look at we're gonna build. 
Click on any bar of this chart -you can do it multiple times- to see what happens!  


<div id='d3TutoGraphContainer'></div>
<script type="text/javascript" src="http://d3js.org/d3.v2.min.js"></script>
<script type="text/javascript">
// Suppose there is currently one div with id "graphContainer" in the DOM
// We append a 900x600 empty SVG container in the div
var chart = d3.select("#d3TutoGraphContainer").append("svg").attr("width", "600").attr("height", "290");

// There is no rectangle on which we can bind data in the SVG container
// All the data will thus be bound in the enter
var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24, 8, 12, 1, 1, 20])
.enter().append('rect')                           // Add a rectangle for each data in the enter
.attr("stroke", "none").attr("fill", "steelblue") // All rectangles are blue with no borders
.attr("x", 0)
.attr("y", function(d, i) {return 25 * i; } )
.attr("width", function(d) {return 20 * d; } )
.attr("height", "20");

rects.on('click', function() {
// Wait 1s, then increase rectangles size with a 2s transition
rects.transition().duration(2000).delay(200)
.attr("width", function(d) {return 500 * Math.random(); } ) });
</script>


Pretty neat, huh? You can see the gist of a standalone working HTML
[here](https://gist.github.com/2601571). We're going to go through the
javascript part which consists of 12 lines of javascript (comments and
blank lines excluded of course), on top of the [d3 library](http://d3js.org/). 
d3 (for **d**ata **d**riven **d**ocument) is a **low-level javascript 
framework that allows you to easily bind data to elements of the 
DOM and manipulate them**. Even though d3's most frequent use is for 
drawing charts, **it is not a visualization library**, it just handles 
data binding and data-driven DOM manipulation, which is arguably the 
boring -event though not the easiest!- part, and lets you focus on content creation.  

So **why** use a low-level framework to draw graphs when so many integrative libraries exist out there (highcharts, google charts ...) ? Precisely because it is **low-level**. That means you have to put in more effort upfront, but in return you gain **total control of your data visualization**, you are more flexible, and you can freely use the full power of existing technologies (CSS3, HTML5, SVG ...) to visualize data however you want (as a graph or otherwise).  

{% gist 2601663 %}



**Notes :**  
1) Many examples use SVG, as this is the most practical way to draw graphs. This is only a d3 tutorial, so please check SVG tutorials if you want to understand it (hint : it is VERY easy !).  
2) As we will see, d3 uses method chaining, which is possible since all d3 functions return the selection to which they were applied, e.g. `selection.firstD3Function().secondD3Function() ...`. More on this later on.  
3) This is by no means a d3 reference, rather it is an introductory d3 tutorial that explains how to work with d3 and the most useful functions. For the complete reference, visit the [d3 website](http://mbostock.github.com/d3/)

## Selecting data
This is the core of D3 : selecting elements of the DOM, and doing stuff with them. D3 selectors are similar to Jquery's as they use the selector format defined by W3C, and widely used in CSS. You can select nodes by tag name, css class or id.  
`d3.select(selector)` selects the first node matching _selector_ and returns a d3 object containing this node on which you can apply any d3 function
`d3.selectAll(selector)` selects all nodes matching _selector_ and returns a d3 object containing these nodes on which you can apply any d3 function  

    d3.select("#someId");                 // Select the element with id "someId"
    d3.selectAll("div");                  // Select all div nodes
    d3.selectAll(".someClass")            // Select all elements with class "someClass"


Note : if your are going to use a selection that has fixed length (for example if you create a bar chart with a fixed number of bars), you should use a variable to store your selection so as to avoid having to call select or selectAll again. For example :
```javascript
var chart = d3.select('#chartContainer');     
chart.[any d3 function here];
```

You can also apply select to an existing selection, to select among the children of the existing selection. This is usually useful to define a container div for an SVG chart, and make sure all d3 manipulations apply to this graph and nothing else.
```javascript
// chart consists of only one element, the div with id "chartContainer"
var chart = d3.select('#chartContainer');

// Select all SVG rectangles children of this div
var chartBars = chart.selectAll("rect");
```

## Inserting in and removing from the DOM
d3 provides functions for inserting in and removing from the DOM. As usual, these functions apply to d3 selections.  
**Note :** you may ask why use these functions when we can use jQuery. The answer is simple : even though you could do it, d3's DOM manipulation functions are designed to work with other d3 function, so you can use method chaining. It is thus easier to use d3 and only d3 to build a data-driven document.  

### Inserting in the DOM
`selection.append(name)` appends an element of the specified _name_ as the last child of each element of _selection_.
```javascript
// Select all the divs in the document, lets say there are 2 divs, so the DOM looks like this :
// <div></div>  <div></div>
var divs = d3.selectAll("div");

// Append a "p" element to every div. The DOM looks like this :
// <div><p></p></div>  <div><p></p></div>
divs.append("p");

// Append a "a" element to every div, and a "img" element to every "a". The DOM looks like this :
// <div><p></p><a><img></img></a></div>  <div><p></p><a><img></img></a></div>
divs.append("a").append("img");
```
There is another way to insert elements in the DOM : before an existing element instead of at the end. This is useful when you use SVG in particular, as the elements appear in the order they have in the DOM. That means that if you append a SVG rectangle to the chart container, it will be on top of all elements, masking them, something you may not want. In these cases, we use `selection.insert(name, before)` which inserts, as a child of every element in _selection_, an element of type _name_ before the first element selectable by the CSS selector _before_ (read that again !). So we can modify our previous example like this :
```javascript
// Select all the divs in the document, lets say there are 2 divs, so the DOM looks like this :
// <div></div>  <div></div>
var divs = d3.selectAll("div");

// Append a "p" element to every div. The DOM looks like this :
// <div><p></p></div>  <div><p></p></div>
divs.append("p");

// Insert a "a" element to every div before the first "p", and append a "img" element to every "a"
// The DOM looks like this : <div><a><img></img></a><p></p></div>  <div><a><img></img></a><p></p></div>
divs.insert("a", "p").append("img");
```
### Removing from the DOM
Removing all the elements from a selection is done with the `d3.remove()` function, like this : `selection.remove()`. This is often used with the `exit()` function, covered in the "Binding data" section below.

## Binding data
Binding data is the core of d3. The `d3.data` function binds data to the selection to which it was applied, and returns a selection, called the _update_ selection, which consists of all the elements from the old selection to which we could bind data.
```javascript
// Select all SVG rectangles in the DOM in the selection bars
var bars = d3.selectAll('rect');

// Bind the new data to the bars
bars.data([4, 6, 8, 99]);

// Bind another set of data, in a more concise way
d3.selectAll('rect').data([1, 2, 4, 8]);
```

This is simple if the data that was bound had the same size as the selection since we have a one-to-one mapping. If this is not the case, there are two possibilities :  
###  The new data size is smaller than the selection size
For example we have selected 6 divs and now we bind [0, 0, 4, 2] which has length 4. Only the first 4 divs will be updated and placed in the _update_ selection, the other 2 will be placed in the _exit_ selection, which is pointed to by the _update_ selection.
```javascript
// Select all divs in the DOM, let's say we have 6 divs
var divs = d3.selectAll('div');

// Bind the new data to the divs, divs now contain the _update_ selection 
divs.data([0, 0, 4, 2]);

// Remove the now-unused divs from the DOM using d3.remove()
divs.exit().remove();

// Or, in a more concise way
d3.selectAll('div').data([0, 0, 4, 2]).exit().remove();
```

### The new data size is bigger than the selection size
In that case, the _update_ selection has the same size as the original selection, but we still have some data left over. This data is put in the _enter_ selection, which is also pointed by the _update_ selection.
```javascript
// Select all divs in the DOM, let's say we have 2 divs
var divs = d3.selectAll('div');

// Bind the new data to the divs, bars now contain the _update_ selection, which has size 2
divs.data([0, 0, 4, 2]);

// For each piece of data not bound to a current div, add a new div containing some text to the DOM
divs.enter().append('div').text("Some text");

// Or, in a more concise way
d3.selectAll('div').data([0, 0, 4, 2]).enter().append('div').text('Some text');
```

### Using _enter_ and _exit_ on the same selection
If the _enter()_ or _exit()_ selections are empty, any operation on them will have no effect. This is useful to know when you don't know whether the new data is bigger or smaller than the old data. Here is an example :
```javascript
// Select all divs in the DOM, and bind some new data, whose size is unknown
var divs = d3.selectAll("div").data(newData);

divs.enter().append("div").text("Some text");     // No effect if the new data is smaller than the original data
divs.exit().remove();                             // No effect if the new data is bigger than the original data
```

## Filtering a selection
The `d3.filter` function, as its name implies, filters a selection and returns the new, trimmed selection. The criteria are defined as a function that is called on every element of the selection and the new selection will only contain the elements for which this function returned true.  
This function, or _selector_, takes two parameters : the data (usually called _d_) and its index (usually called _i_) in the bound data.
```javascript
// Select all divs in the DOM, let's say we have 5 divs to which we bind [1 ,4, 5, 6, 24]
var divs = d3.selectAll('div').data([1 ,4, 5, 24, 6]);

// Our criteria. Can also be defined directly as an anonymous function passed as an argument to filter
var theFilter = function(d, i) {return (d % 2 == 0; ) };

// Select only the divs whose bound data is an even number
var evenDataDivs = divs.filter(theFilter);
```
**The last line of code is very important,** as this approach will be used by a lot of other functions, notably those modifying the DOM. Here is how it works : the variable _divs_ contains a d3 selection of 5 "div" elements. The first "div" has the data 1 bound to it, the second "div" has the data 4 bound to it, the third the data 5 and so on. When we call `d3.filter` on _divs_, it creates an empty selection, then looks at the first element (the "div" number 0) and calls `theFilter(1, 0)`, which returns _false_, so this first element is not added to _evenDataDivs_. It then looks at the second element (the "div" number 1) and calls `theFilter(4, 1)`, which returns _true_, so the second div is added to _evenDataDivs_. The third element is not added (`theFilter(5, 2)` returns _false_), the fourth and fifth are added (`theFilter(24, 3)` and `theFilter(6, 4)` both return _true_). **Make sure you really understand this part as it is the core of d3's DOM manipulation, as we will see in the next section.**  

Also, you can see that we didn't need the "index" information (the _i_ argument of `theFilter` in our example). In that case, d3 allows you to define a one-parameter function, in our case it would be `function(d) {return (d % 2 == 0); }`.

## Modifying the DOM according to the data
Now it's time to use d3 for what it was designed : manipulate the DOM using the data. We can modify any attribute of an element, CSS classes, properties, text and even inner HTML.

### Modifying attributes : d3.attr
Calling `selection.attr(attribute, value)` modifies (and creates if it doesn't exist) the attribute _attribute_ to give it the value _value_ for every element of _selection_. _value_ can be a function of data and index of the same kind as the one used in the "filters" section. For example, we can simply create an horizontal bar chart like this **(I encourage you to copy-paste this example and play with it)** :
```javascript
// Suppose there is currently one div with id "graphContainer" in the DOM
// We append a 900x600 empty SVG container in the div
var chart = d3.select("#graphContainer").append("svg").attr("width", "900").attr("height", "600");

// There is no rectangle on which we can bind data in the SVG container
// All the data will thus be bound in the enter
var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24])
            .enter().append('rect')                           // Add a rectangle for each data in the enter
            .attr("stroke", "none").attr("fill", "steelblue") // All rectangles are blue with no borders
            .attr("x", 0)
            .attr("y", function(d, i) {return 25 * i; } )
            .attr("width", function(d) {return 20 * d; } )
            .attr("height", "20");
```

Now we can see how easy it was to create a graph : only 7 lines of code ! As I said at the beginning, all the boring stuff is taken care of by d3, we only have to write the lines that create the content. Now we can modify this barchart very easily, like this :
```javascript
// Change rectangle colors to red and increase their size
rects.attr("fill", "red").attr("width", function(d) {return 25 * d; } );
```
As the data is still bound to the "rect" elements, we don't have to re-bind it. And since the selection was stored in the rects vqriqble, we don't have to use `selectAll('rect')`.

### Other modifications
As this is not a reference, I won't show all functions that modify elements. You can look into the d3 reference on their [website](http://mbostock.github.com/d3/) to learn how to modify classes with `d3.classed`, properties with `d3.property` and style with `d3.style`.

## Transitions
The last, and maybe the most impressive piece of d3 I will explain is transitions. As we saw in the previous section, d3 enables us to modify any attribute instantly. It can also transition number attributes (e.g. position in pixels, width etc) from their old to their new value smoothly, using the `transition()`, `duration()` and `delay()` functions. You apply this function to any selection and then apply the new attributes, as in this example (based on the barchart from the previous section) :
```javascript
// Wait 1s, then increase rectangles size with a 2s transition
rects.transition().duration(2000).delay(1000)
       attr("width", function(d) {return 25 * d; } );
```
Cool, isn't it ? The use of `delay()` is optional, as you can imagine. The `transition()` can smoothly transition number attributes, so for example it won't work with strings such as colors "steelblue" and "red". However, d3 being as smart as it is, it can understand when a string contains numbers, and smoothly transition the number parts of the string. So you can get a "rainbow transition" if you use colors such as "#555555" and "#aa5599" (modify the bar chart example to see how it works).
### Advanced transitions
What I explained are just the default, basic transition engine, which works very well. You may need to customize your transition interpolation function, tween or easing function (for example if you want to make SVG paths move). This is not basic stuff anymore so it will not be covered here, I may write another tutorial for this !

## Conclusion
With this tutorial, you should know more than enough to create awesome custom graphs or data visualizations. Don't hesitate to refer to the complete reference on the [d3 website](http://mbostock.github.com/d3/) for more information.







