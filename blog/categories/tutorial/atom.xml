<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorial | Need for Air]]></title>
  <link href="http://needforair.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="http://needforair.com/"/>
  <updated>2012-05-07T09:45:30+02:00</updated>
  <id>http://needforair.com/</id>
  <author>
    <name><![CDATA[Need for Air]]></name>
    
  </author>
  <generator uri="http://ryandeussing.com/">Ryan Deussing</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to d3: Build an Animated Graph in 12 Lines of Code]]></title>
    <link href="http://needforair.com/blog/2012/05/07/d3-tutorial/"/>
    <updated>2012-05-07T12:17:00+02:00</updated>
    <id>http://needforair.com/blog/2012/05/07/d3-tutorial</id>
    <content type="html"><![CDATA[<p>Before anything else, let's take a look at we're gonna build.
Click on any bar of this chart -you can do it multiple times- to see what happens!</p>

<div id='d3TutoGraphContainer'></div>


<script type="text/javascript" src="http://d3js.org/d3.v2.min.js"></script>


<script type="text/javascript">
// Suppose there is currently one div with id "graphContainer" in the DOM
// We append a 900x600 empty SVG container in the div
var chart = d3.select("#d3TutoGraphContainer").append("svg").attr("width", "600").attr("height", "290");

// There is no rectangle on which we can bind data in the SVG container
// All the data will thus be bound in the enter
var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24, 8, 12, 1, 1, 20])
.enter().append('rect')                           // Add a rectangle for each data in the enter
.attr("stroke", "none").attr("fill", "steelblue") // All rectangles are blue with no borders
.attr("x", 0)
.attr("y", function(d, i) {return 25 * i; } )
.attr("width", function(d) {return 20 * d; } )
.attr("height", "20");

rects.on('click', function() {
// Wait 1s, then increase rectangles size with a 2s transition
rects.transition().duration(2000).delay(200)
.attr("width", function(d) {return 500 * Math.random(); } ) });
</script>


<p>Pretty neat, huh? You can see the gist of a standalone working HTML
<a href="https://gist.github.com/2601571">here</a>. We're going to go through the
javascript part which consists of 12 lines of javascript (comments and
blank lines excluded of course), on top of the <a href="http://d3js.org/">d3 library</a>.
d3 (for <strong>d</strong>ata <strong>d</strong>riven <strong>d</strong>ocument) is a <strong>low-level javascript
framework that allows you to easily bind data to elements of the
DOM and manipulate them</strong>. Even though d3's most frequent use is for
drawing charts, <strong>it is not a visualization library</strong>, it just handles
data binding and data-driven DOM manipulation, which is arguably the
boring -event though not the easiest!- part, and lets you focus on content creation.</p>

<p>So <strong>why</strong> use a low-level framework to draw graphs when so many integrative chart
libraries exist out there (highcharts, google charts ...) ? Precisely because
it is <strong>low-level</strong>. That means you have to put in more effort upfront, but in
return you gain <strong>total control of your data visualization</strong>, you are more flexible,
and you can freely use the full power of existing technologies (CSS3, HTML5, SVG ...)
to visualize data however you want (as a graph or otherwise).</p>

<p>This example uses SVG. It's not a problem if you are not used to it, as it is very
straightforward, but you may still want to check <a href="https://developer.mozilla.org/en/SVG">the MDN tutorial on SVG</a>.
Now let's take a look at the code for the chart:</p>

<p><div><script src='https://gist.github.com/2601663.js?file='></script>
<noscript><pre><code>// Suppose there is currently one div with id &quot;d3TutoGraphContainer&quot; in the DOM
// We append a 600x300 empty SVG container in the div
var chart = d3.select(&quot;#d3TutoGraphContainer&quot;).append(&quot;svg&quot;).attr(&quot;width&quot;, &quot;600&quot;).attr(&quot;height&quot;, &quot;300&quot;);

// There is no rectangle on which we can bind data in the SVG container
// All the data will thus be bound in the enter
var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24, 8, 12, 1, 1, 20])
                 .enter().append('rect')                           // Add a rectangle for each data in the enter
                 .attr(&quot;stroke&quot;, &quot;none&quot;).attr(&quot;fill&quot;, &quot;steelblue&quot;) // All rectangles are blue with no borders
                 .attr(&quot;x&quot;, 0)
                 .attr(&quot;y&quot;, function(d, i) { return 25 * i; } )
                 .attr(&quot;width&quot;, function(d) { return 20 * d; } )
                 .attr(&quot;height&quot;, &quot;20&quot;);

rects.on('click', function() {
                    rects.transition().duration(2000).delay(200)
                         .attr(&quot;width&quot;, function(d) { return 500 * Math.random(); } )
                  });</code></pre></noscript></div>
</p>

<h2>Selecting data</h2>

<p>This is the core of D3 : selecting elements of the DOM, and doing stuff with them. D3 selectors are similar to Jquery's as they use the selector format defined by W3C, and widely used in CSS. You can select nodes by tag name, css class or id.<br/>
<code>d3.select(selector)</code> selects the first node matching <em>selector</em> and returns a d3 object containing this node on which you can apply any d3 function
<code>d3.selectAll(selector)</code> selects all nodes matching <em>selector</em> and returns a d3 object containing these nodes on which you can apply any d3 function</p>

<pre><code>d3.select("#someId");                 // Select the element with id "someId"
d3.selectAll("div");                  // Select all div nodes
d3.selectAll(".someClass")            // Select all elements with class "someClass"
</code></pre>

<p>Note : if your are going to use a selection that has fixed length (for example if you create a bar chart with a fixed number of bars), you should use a variable to store your selection so as to avoid having to call select or selectAll again. For example :
<code>javascript
var chart = d3.select('#chartContainer');     
chart.[any d3 function here];
</code></p>

<p>You can also apply select to an existing selection, to select among the children of the existing selection. This is usually useful to define a container div for an SVG chart, and make sure all d3 manipulations apply to this graph and nothing else.
```javascript
// chart consists of only one element, the div with id "chartContainer"
var chart = d3.select('#chartContainer');</p>

<p>// Select all SVG rectangles children of this div
var chartBars = chart.selectAll("rect");
```</p>

<h2>Inserting in and removing from the DOM</h2>

<p>d3 provides functions for inserting in and removing from the DOM. As usual, these functions apply to d3 selections.<br/>
<strong>Note :</strong> you may ask why use these functions when we can use jQuery. The answer is simple : even though you could do it, d3's DOM manipulation functions are designed to work with other d3 function, so you can use method chaining. It is thus easier to use d3 and only d3 to build a data-driven document.</p>

<h3>Inserting in the DOM</h3>

<p><code>selection.append(name)</code> appends an element of the specified <em>name</em> as the last child of each element of <em>selection</em>.
```javascript
// Select all the divs in the document, lets say there are 2 divs, so the DOM looks like this :
// <div></div>  <div></div>
var divs = d3.selectAll("div");</p>

<p>// Append a "p" element to every div. The DOM looks like this :
// <div><p></p></div>  <div><p></p></div>
divs.append("p");</p>

<p>// Append a "a" element to every div, and a "img" element to every "a". The DOM looks like this :
// <div><p></p><a><img></img></a></div>  <div><p></p><a><img></img></a></div>
divs.append("a").append("img");
<code>
There is another way to insert elements in the DOM : before an existing element instead of at the end. This is useful when you use SVG in particular, as the elements appear in the order they have in the DOM. That means that if you append a SVG rectangle to the chart container, it will be on top of all elements, masking them, something you may not want. In these cases, we use `selection.insert(name, before)` which inserts, as a child of every element in _selection_, an element of type _name_ before the first element selectable by the CSS selector _before_ (read that again !). So we can modify our previous example like this :
</code>javascript
// Select all the divs in the document, lets say there are 2 divs, so the DOM looks like this :
// <div></div>  <div></div>
var divs = d3.selectAll("div");</p>

<p>// Append a "p" element to every div. The DOM looks like this :
// <div><p></p></div>  <div><p></p></div>
divs.append("p");</p>

<p>// Insert a "a" element to every div before the first "p", and append a "img" element to every "a"
// The DOM looks like this : <div><a><img></img></a><p></p></div>  <div><a><img></img></a><p></p></div>
divs.insert("a", "p").append("img");
```</p>

<h3>Removing from the DOM</h3>

<p>Removing all the elements from a selection is done with the <code>d3.remove()</code> function, like this : <code>selection.remove()</code>. This is often used with the <code>exit()</code> function, covered in the "Binding data" section below.</p>

<h2>Binding data</h2>

<p>Binding data is the core of d3. The <code>d3.data</code> function binds data to the selection to which it was applied, and returns a selection, called the <em>update</em> selection, which consists of all the elements from the old selection to which we could bind data.
```javascript
// Select all SVG rectangles in the DOM in the selection bars
var bars = d3.selectAll('rect');</p>

<p>// Bind the new data to the bars
bars.data([4, 6, 8, 99]);</p>

<p>// Bind another set of data, in a more concise way
d3.selectAll('rect').data([1, 2, 4, 8]);
```</p>

<p>This is simple if the data that was bound had the same size as the selection since we have a one-to-one mapping. If this is not the case, there are two possibilities :</p>

<h3>The new data size is smaller than the selection size</h3>

<p>For example we have selected 6 divs and now we bind [0, 0, 4, 2] which has length 4. Only the first 4 divs will be updated and placed in the <em>update</em> selection, the other 2 will be placed in the <em>exit</em> selection, which is pointed to by the <em>update</em> selection.
```javascript
// Select all divs in the DOM, let's say we have 6 divs
var divs = d3.selectAll('div');</p>

<p>// Bind the new data to the divs, divs now contain the <em>update</em> selection
divs.data([0, 0, 4, 2]);</p>

<p>// Remove the now-unused divs from the DOM using d3.remove()
divs.exit().remove();</p>

<p>// Or, in a more concise way
d3.selectAll('div').data([0, 0, 4, 2]).exit().remove();
```</p>

<h3>The new data size is bigger than the selection size</h3>

<p>In that case, the <em>update</em> selection has the same size as the original selection, but we still have some data left over. This data is put in the <em>enter</em> selection, which is also pointed by the <em>update</em> selection.
```javascript
// Select all divs in the DOM, let's say we have 2 divs
var divs = d3.selectAll('div');</p>

<p>// Bind the new data to the divs, bars now contain the <em>update</em> selection, which has size 2
divs.data([0, 0, 4, 2]);</p>

<p>// For each piece of data not bound to a current div, add a new div containing some text to the DOM
divs.enter().append('div').text("Some text");</p>

<p>// Or, in a more concise way
d3.selectAll('div').data([0, 0, 4, 2]).enter().append('div').text('Some text');
```</p>

<h3>Using <em>enter</em> and <em>exit</em> on the same selection</h3>

<p>If the <em>enter()</em> or <em>exit()</em> selections are empty, any operation on them will have no effect. This is useful to know when you don't know whether the new data is bigger or smaller than the old data. Here is an example :
```javascript
// Select all divs in the DOM, and bind some new data, whose size is unknown
var divs = d3.selectAll("div").data(newData);</p>

<p>divs.enter().append("div").text("Some text");     // No effect if the new data is smaller than the original data
divs.exit().remove();                             // No effect if the new data is bigger than the original data
```</p>

<h2>Filtering a selection</h2>

<p>The <code>d3.filter</code> function, as its name implies, filters a selection and returns the new, trimmed selection. The criteria are defined as a function that is called on every element of the selection and the new selection will only contain the elements for which this function returned true.<br/>
This function, or <em>selector</em>, takes two parameters : the data (usually called <em>d</em>) and its index (usually called <em>i</em>) in the bound data.
```javascript
// Select all divs in the DOM, let's say we have 5 divs to which we bind [1 ,4, 5, 6, 24]
var divs = d3.selectAll('div').data([1 ,4, 5, 24, 6]);</p>

<p>// Our criteria. Can also be defined directly as an anonymous function passed as an argument to filter
var theFilter = function(d, i) {return (d % 2 == 0; ) };</p>

<p>// Select only the divs whose bound data is an even number
var evenDataDivs = divs.filter(theFilter);
<code>``
**The last line of code is very important,** as this approach will be used by a lot of other functions, notably those modifying the DOM. Here is how it works : the variable _divs_ contains a d3 selection of 5 "div" elements. The first "div" has the data 1 bound to it, the second "div" has the data 4 bound to it, the third the data 5 and so on. When we call</code>d3.filter<code>on _divs_, it creates an empty selection, then looks at the first element (the "div" number 0) and calls</code>theFilter(1, 0)<code>, which returns _false_, so this first element is not added to _evenDataDivs_. It then looks at the second element (the "div" number 1) and calls</code>theFilter(4, 1)<code>, which returns _true_, so the second div is added to _evenDataDivs_. The third element is not added (</code>theFilter(5, 2)<code>returns _false_), the fourth and fifth are added (</code>theFilter(24, 3)<code>and</code>theFilter(6, 4)` both return <em>true</em>). <strong>Make sure you really understand this part as it is the core of d3's DOM manipulation, as we will see in the next section.</strong></p>

<p>Also, you can see that we didn't need the "index" information (the <em>i</em> argument of <code>theFilter</code> in our example). In that case, d3 allows you to define a one-parameter function, in our case it would be <code>function(d) {return (d % 2 == 0); }</code>.</p>

<h2>Modifying the DOM according to the data</h2>

<p>Now it's time to use d3 for what it was designed : manipulate the DOM using the data. We can modify any attribute of an element, CSS classes, properties, text and even inner HTML.</p>

<h3>Modifying attributes : d3.attr</h3>

<p>Calling <code>selection.attr(attribute, value)</code> modifies (and creates if it doesn't exist) the attribute <em>attribute</em> to give it the value <em>value</em> for every element of <em>selection</em>. <em>value</em> can be a function of data and index of the same kind as the one used in the "filters" section. For example, we can simply create an horizontal bar chart like this <strong>(I encourage you to copy-paste this example and play with it)</strong> :
```javascript
// Suppose there is currently one div with id "graphContainer" in the DOM
// We append a 900x600 empty SVG container in the div
var chart = d3.select("#graphContainer").append("svg").attr("width", "900").attr("height", "600");</p>

<p>// There is no rectangle on which we can bind data in the SVG container
// All the data will thus be bound in the enter
var rects = chart.selectAll('rect').data([1 ,4, 5, 6, 24])</p>

<pre><code>        .enter().append('rect')                           // Add a rectangle for each data in the enter
        .attr("stroke", "none").attr("fill", "steelblue") // All rectangles are blue with no borders
        .attr("x", 0)
        .attr("y", function(d, i) {return 25 * i; } )
        .attr("width", function(d) {return 20 * d; } )
        .attr("height", "20");
</code></pre>

<p>```</p>

<p>Now we can see how easy it was to create a graph : only 7 lines of code ! As I said at the beginning, all the boring stuff is taken care of by d3, we only have to write the lines that create the content. Now we can modify this barchart very easily, like this :
<code>javascript
// Change rectangle colors to red and increase their size
rects.attr("fill", "red").attr("width", function(d) {return 25 * d; } );
</code>
As the data is still bound to the "rect" elements, we don't have to re-bind it. And since the selection was stored in the rects vqriqble, we don't have to use <code>selectAll('rect')</code>.</p>

<h3>Other modifications</h3>

<p>As this is not a reference, I won't show all functions that modify elements. You can look into the d3 reference on their <a href="http://mbostock.github.com/d3/">website</a> to learn how to modify classes with <code>d3.classed</code>, properties with <code>d3.property</code> and style with <code>d3.style</code>.</p>

<h2>Transitions</h2>

<p>The last, and maybe the most impressive piece of d3 I will explain is transitions. As we saw in the previous section, d3 enables us to modify any attribute instantly. It can also transition number attributes (e.g. position in pixels, width etc) from their old to their new value smoothly, using the <code>transition()</code>, <code>duration()</code> and <code>delay()</code> functions. You apply this function to any selection and then apply the new attributes, as in this example (based on the barchart from the previous section) :
```javascript
// Wait 1s, then increase rectangles size with a 2s transition
rects.transition().duration(2000).delay(1000)</p>

<pre><code>   attr("width", function(d) {return 25 * d; } );
</code></pre>

<p><code>``
Cool, isn't it ? The use of</code>delay()<code>is optional, as you can imagine. The</code>transition()` can smoothly transition number attributes, so for example it won't work with strings such as colors "steelblue" and "red". However, d3 being as smart as it is, it can understand when a string contains numbers, and smoothly transition the number parts of the string. So you can get a "rainbow transition" if you use colors such as "#555555" and "#aa5599" (modify the bar chart example to see how it works).</p>

<h3>Advanced transitions</h3>

<p>What I explained are just the default, basic transition engine, which works very well. You may need to customize your transition interpolation function, tween or easing function (for example if you want to make SVG paths move). This is not basic stuff anymore so it will not be covered here, I may write another tutorial for this !</p>

<h2>Conclusion</h2>

<p>With this tutorial, you should know more than enough to create awesome custom graphs or data visualizations. Don't hesitate to refer to the complete reference on the <a href="http://mbostock.github.com/d3/">d3 website</a> for more information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial: Domain Name System for Beginners]]></title>
    <link href="http://needforair.com/blog/2012/04/22/dns-redirections/"/>
    <updated>2012-04-22T08:30:00+02:00</updated>
    <id>http://needforair.com/blog/2012/04/22/dns-redirections</id>
    <content type="html"><![CDATA[<p>If you build a website, you will want your own domain name, which means
you will need to manage your Domain Name System (DNS). While there is nothing very
complicated here, the info is scattered across the Internet, so I decided
to write a "cheat sheet"-like tutorial which will hopefully save you some time!</p>

<p><a href="http://www.flickr.com/photos/49502986585@N01/277341190/"><img src="http://farm1.staticflickr.com/122/277341190_3f098a08a4_n.jpg" alt="Code" /></a>
<em>by <a href="http://www.flickr.com/photos/ezu/" title="Author">Ezu</a></em></p>

<h2>What is the DNS?</h2>

<p>The DNS is a system that helps your computer translate human-readable <strong>domain names</strong>
into computer-usable <strong>IP addresses</strong> (4 numbers between 0 and 255
identifying a server).</p>

<p>A domain name must have two parts, separated by a dot: the <strong>actual domain</strong> (e.g. <em>google</em>) and the
<strong>top-level domain</strong> (e.g. <em>com</em>). In this example, the domain name is
<em>google.com</em>. Optionally, you can also use different <strong>subdomains</strong>, so
that users typing <em>subdomain1.domain.tld</em> and <em>subdomain2.domain.tld</em>
arrive on two different pages. The well-known <em>www</em> is a subdomain of
<em>google.com</em> in the address <em>www.google.com</em>.</p>

<p>To use your own custom domain name, you need
to buy one from a <strong>registrar</strong> (such as <a href="https://www.gandi.net/">Gandi</a>).</p>

<h2>How to manage it: the zone file</h2>

<p>Most registrars will let you use Web forwardings, which are simple
redirections (what happens when the webpage you are looking at automatically changes to another page). However, you should
avoid those for the following reasons:</p>

<ul>
<li>Simple redirections will replace your domain name by your IP address,
which is the best way to scare off users</li>
<li>Masked redirections will not scare off users, but they will give you a
very poor search-engine rating</li>
</ul>


<p>You will need to use the <strong>zone file</strong>. It is a simple text file
describing the structure of your DNS zone (usually your domain) to the global DNS
(i.e. the world). Let's take a look at a sample zone file (the zone file on
Gandi for our blog <a href="http://needforair.com">needforair.com</a>.</p>

<p>These are the DNS rules for our domain <code>needforair.com</code>:</p>

<pre><code>@ 3600 IN A 184.106.20.102
www 3600 IN CNAME needforair.com.
wik 3600 IN CNAME fr.wikipedia.org.
</code></pre>

<p>You usually also find lines similar to the following in a zone file.
They manage the email server your registrar provides you, and shouldn't
touch them:</p>

<pre><code>@ 3600 IN MX 10 spool.mail.gandi.net.
@ 3600 IN MX 50 fb.mail.gandi.net.
smtp 3600 IN CNAME relay.mail.gandi.net.
webmail 3600 IN CNAME agent.mail.gandi.net.
pop 3600 IN CNAME access.mail.gandi.net.
imap 3600 IN CNAME access.mail.gandi.net.
</code></pre>

<p>The most important points here are:</p>

<ul>
<li>Each line corresponds to one rule (a record)</li>
<li>The <code>@</code> character represents your bare domain (needforair.com in our example) as opposed
to subdomains such as <code>test.needforair.com</code> or <code>www.needforair.com</code></li>
<li>An <code>A</code> record points to an IP address, usually your server. In our example, <code>@ 3600 IN A 184.106.20.102</code>
indicates that a user typing 'needforair.com' in his address bar will request content from the IP address 184.106.20.102.
The <code>3600</code> number is the <a href="http://en.wikipedia.org/wiki/Time_to_live#DNS_records">Time To Live (TTL)</a> of the record,
the time (in seconds) during which a nameserver will cache the record and not ask the authoritative server (Gandi here)
if queried again</li>
<li>A <code>CNAME</code> record points to any domain or subdomain, either in your zone or outside.
In our example, <code>www 3600 IN CNAME needforair.com.</code> means that a user typing <code>www.needforair.com</code> will request content
from the same IP address as needforair.com (that's not the case by default). You can of course use a CNAME to any other
domain, in our example <code>wik 3600 IN CNAME fr.wikipedia.org.</code> which will make users typing "wik.needforair.com" in their
address bar go to the French version of Wikipedia instead (don't try it
we removed it!)</li>
<li><strong>Don't forget the period ('.') at the end of your CNAMEs !!!</strong> For example, use "needforair.com.", and NOT "needforair.com".
If you forget the period, the record simply won't work, and you will
spend an awful lot of time to figure out why</li>
</ul>


<p>There are lots of other types of rules, but this should be enough to set up your DNS.</p>

<p>Last note: keep in mind that <strong>changes to the zone file take some time</strong>,
usually a few hours, to propagate through the Internet. So don't make a
mistake or they will take some time to spot and correct!</p>

<h2>Discover more</h2>

<ul>
<li><a href="http://continuations.com/post/16405180072/tech-tuesday-dns">A great primer on DNS for the non-technical</a></li>
<li><a href="http://en.wikipedia.org/wiki/Zone_file">Wikipedia's article on the Zone file</a></li>
<li><a href="http://en.wikipedia.org/wiki/Domain_Name_System">Wikipedia's article on the DNS</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
